SELECT CUSTID, SUM(SALEPRICE)
FROM ORDERS
GROUP BY CUSTID
;
-------------------
SELECT C.NAME, SUM(SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
ORDER BY 1
;

--주문 테이블의 고객별 데이터 조회(건수, 합계, 평균, 최소, 최대)
SELECT C.NAME, COUNT(*), SUM(SALEPRICE), TRUNC(AVG(SALEPRICE)), MIN(SALEPRICE), MAX(SALEPRICE)
FROM ORDERS O, CUSTOMER C
WHERE O.CUSTID = C.CUSTID
AND C.NAME IN ('추신수', '박지성')
GROUP BY C.NAME
ORDER BY C.NAME
;

----------------------------
-- 고객명 기준으로 고객별 데이터 조회 (건수, 합계, 평균, 최소, 최대)
-- 추신수, 장미란, 고객 2명만 조회
SELECT C.NAME, COUNT(*), SUM(SALEPRICE), ROUND(AVG(SALEPRICE)), MIN(SALEPRICE), MAX(SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
AND C.NAME IN ('추신수', '장미란')
GROUP BY C.NAME
ORDER BY COUNT(*) DESC
;
-- ANSI 표준 SQL
SELECT C.NAME, COUNT(*), SUM(SALEPRICE), ROUND(AVG(SALEPRICE)), MIN(SALEPRICE), MAX(SALEPRICE)
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID
WHERE C.NAME IN ('추신수', '장미란')
GROUP BY C.NAME
ORDER BY COUNT(*) DESC
;

-------------------------
--HAVING 절 : GROUP BY절에 의해서 만들어진 데이터에서 검색조건 부여 (GROUP BY 없이 단독으로 사용할 수 없다)
-- 3건이상 구매한 고객 조회 (고객명, 건수)
SELECT C.NAME, COUNT(*) AS CNT
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
HAVING COUNT(*) >= 3 -- 그룹핑된 데이터에서 원하는 데이터 검색
;
----------------
-- 구매한 책중에서 20000원 이상인 책을 구매한 사람의 통계데이터 (건수, 합계, 평균, 최소, 최대)
-- HAVING 절 사용
SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE), TRUNC(AVG(O.SALEPRICE)), MIN(O.SALEPRICE), MAX(O.SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
HAVING MAX(O.SALEPRICE) >= 20000 -- 그룹핑 결과(통계데이터)를 구하고 2만원 이상 구입한 사람 찾기
;
-- WHERE 절만 사용
-- HAVING 절에서 사용되는 조건은 그룹핑된 데이터 기준으로 검색
-- (결과값이 다르게 처리되므로 찾을 데이터가 무엇인지 명확히 판단하고 사용할 것)
SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE), TRUNC(AVG(O.SALEPRICE)), MIN(O.SALEPRICE), MAX(O.SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
AND O.SALEPRICE >= 20000
GROUP BY C.NAME -- 2만원이상인 책만 대상으로 구매 내역 찾기
;
--======================================
-- 필요시 GROUP BY ~ HAVING 구문을 사용해서 처리
-- 1. 고객이 주문한 도서의 총 판매건수, 판매액, 평균값, 최저가, 최고가 구하기
SELECT C.NAME 이름, COUNT(*) AS "총 수량",
               SUM(O.SALEPRICE) 합계액,
               TRUNC(AVG(O.SALEPRICE)) 평균값,
               MIN(O.SALEPRICE) 최소값,
               MAX(O.SALEPRICE) 최대값
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID
GROUP BY C.NAME
ORDER BY C.NAME
;

SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE), TRUNC(AVG(O.SALEPRICE)), MIN(O.SALEPRICE), MAX(O.SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
ORDER BY C.NAME
;

-- 2. 고객별로 주문한 도서의 총 수량, 총 판매액 구하기
SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE) 
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID
GROUP BY C.NAME
;

SELECT C.NAME, COUNT(*) AS CNT, SUM(O.SALEPRICE) AS SUM_PRICE
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
--ORDER BY SUM(O.SALEPRICE) DESC -- 컬럼 함수로 정렬
--ORDER BY 3 DESC -- 컬럼 위치 값으로 정렬
ORDER BY SUM_PRICE DESC
;
-- 3. 고객의 이름과 고객이 주문한 도서의 판매가격을 검색
SELECT  C.NAME, B.BOOKNAME, O.SALEPRICE
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID INNER JOIN BOOK B
ON O.BOOKID = B.BOOKID
;

SELECT  C.NAME, B.BOOKNAME, O.SALEPRICE
FROM CUSTOMER C, ORDERS O, BOOK B
WHERE C.CUSTID = O.CUSTID
AND O.BOOKID = B.BOOKID
;
-- 4. 고객별로 주문한 모든 도서의 총 판매액을 구하고, 고객명으로 정렬
SELECT C.NAME, SUM(O.SALEPRICE)
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID
GROUP BY C.NAME
ORDER BY C.NAME
;

SELECT C.NAME, SUM(O.SALEPRICE)
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
ORDER BY C.NAME
;
-- 5. 고객별로 주문한 건수, 합계금액, 평균금액을 구하고 3권 보다 적게 구입한 사람 검색
SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE), TRUNC(AVG(O.SALEPRICE))
FROM CUSTOMER C INNER JOIN ORDERS O
ON C.CUSTID = O.CUSTID
GROUP BY C.NAME
HAVING COUNT(*) <= 2
;

SELECT C.NAME, COUNT(*), SUM(O.SALEPRICE), TRUNC(AVG(O.SALEPRICE))
FROM CUSTOMER C, ORDERS O
WHERE C.CUSTID = O.CUSTID
GROUP BY C.NAME
HAVING COUNT(*) <= 2
;
-- (번외) 고객 중 한 권도 구입 안한 사람은 누구??
--SELECT C.NAME, COUNT(*)
--FROM CUSTOMER C INNER JOIN ORDERS O
--ON C.CUSTID = O.CUSTID
--
--GROUP BY C.NAME
--HAVING COUNT(*) < 1
--;
--------------------------------------------






